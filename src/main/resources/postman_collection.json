{
  "info": {
    "name": "Teste de API - Busca CEP",
    "description": "Collection para testar a API 'Busca CEP'.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "cepValido",
      "value": "01001-000",
      "type": "string"
    },
    {
      "key": "cepInvalido",
      "value": "123",
      "type": "string"
    },
    {
      "key": "cepInexistente",
      "value": "00000-000",
      "type": "string"
    },
    {
      "key": "host",
      "value": "localhost",
      "type": "string"
    },
    {
      "key": "port",
      "value": "8080",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Consulta com CEP válido",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["cep", "{{cepValido}}"]
        },
        "description": "Dado: uso um CEP válido\nQuando: envio a requisição para a API\nEntão: devo receber status 200 e um endereço válido"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code é 200', function () { pm.response.to.have.status(200); });",
              "pm.test('Logradouro correto', function () { pm.expect(pm.response.json().logradouro).to.eql('Praça da Sé'); });",
              "pm.test('UF correta', function () { pm.expect(pm.response.json().uf).to.eql('SP');});",
              "pm.test('Tempo de resposta abaixo de 500ms', function () { pm.expect(pm.response.responseTime).to.be.below(500);});"
            ]
          }
        }
      ]
    },
    {
      "name": "Consulta com CEP inválido",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["cep", "{{cepInvalido}}"]
        },
        "description": "Dado: uso um CEP inválido\nQuando: envio a requisição para a API\nEntão: devo receber status 400 e um erro sobre o formato inválido"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code é 400 para CEP inválido', function () { pm.response.to.have.status(400); });",
              "pm.test('Mensagem de erro para \"Formato de CEP inválido.\"', function () { pm.expect(pm.response.text()).to.include('Formato de CEP inválido. Use o formato 12345-678.'); });",
              "pm.test('Tempo de resposta abaixo de 200ms', function () { pm.expect(pm.response.responseTime).to.be.below(200);});"
            ]
          }
        }
      ]
    },
    {
      "name": "Consulta com CEP inexistente",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["cep", "{{cepInexistente}}"]
        },
        "description": "Dado: uso um CEP inexistente\nQuando: envio a requisição para a API\nEntão: devo receber status 404 e um erro de CEP não encontrado"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code é 404 para CEP inexistente', function () { pm.response.to.have.status(404); });",
              "pm.test('Mensagem de erro \"CEP não encontrado.\"', function () { pm.expect(pm.response.text()).to.include('Erro ao buscar o CEP: CEP não encontrado.'); });",
              "pm.test('Tempo de resposta abaixo de 200ms', function () { pm.expect(pm.response.responseTime).to.be.below(200);});"
            ]
          }
        }
      ]
    },
    {
      "name": "Consulta da integração com o front (página web)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["/"]
        },
        "description": "Dado: uso do endpoint base\nQuando: envio a requisição para a API\nEntão: devo receber status 200 e um documento HTML válido"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code é 200', function () { pm.response.to.have.status(200); });",
              "pm.test('Corpo da resposta contém <!DOCTYPE html>', function () { pm.expect(pm.response.text()).to.contains('<!DOCTYPE html>'); });",
              "pm.test('Tempo de resposta abaixo de 200ms', function () { pm.expect(pm.response.responseTime).to.be.below(200);});"
            ]
          }
        }
      ]
    }
  ]
}
